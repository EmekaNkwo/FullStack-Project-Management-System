// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StaffRole {
  ADMIN
  PRODUCT_OWNER
  PROJECT_MANAGER
  STAFF
}

model User {
  userId            Int     @id @default(autoincrement())
  username          String?  @unique
  email             String  @unique
  password          String?
  fullName          String
  profilePictureUrl String?
  teamId            Int?
  role              StaffRole? @default(STAFF)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  lastLogin          DateTime?

  authoredTasks   Task[]           @relation("TaskAuthor")
  assignedTasks   Task[]           @relation("TaskAssignee")
  taskAssignments TaskAssignment[]
  attachments     Attachment[]
  comments        Comment[]
  team            Team?            @relation(fields: [teamId], references: [id])
  productOwnerTeams      Team[]    @relation("TeamProductOwner")
  projectManagerTeams    Team[]    @relation("TeamProjectManager")
}

model Team {
  id                   Int           @id @default(autoincrement())
  teamName             String
  productOwnerUserId   Int?
  productOwner         User?         @relation("TeamProductOwner", fields: [productOwnerUserId], references: [userId])
  projectManagerUserId Int?
  projectManager       User?         @relation("TeamProjectManager", fields: [projectManagerUserId], references: [userId])
  projectTeams         ProjectTeam[]
  users                User[]
  projects             Project[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Project {
  id           Int           @id @default(autoincrement()) @unique
  name         String        @unique
  description  String?
  startDate    DateTime?
  endDate      DateTime?
  tasks        Task[]
  projectTeams ProjectTeam[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  Team Team[]
}

model ProjectTeam {
  id        Int     @id @default(autoincrement())
  teamId    Int
  projectId Int
  team      Team    @relation(fields: [teamId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Task {
  id             Int       @id @default(autoincrement())
  title          String
  description    String?
  status         String?
  priority       String?
  tags           String?
  startDate      DateTime?
  dueDate        DateTime?
  points         Int?
  projectId      Int
  authorUserId   Int
  assignedUserId Int?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  project         Project          @relation(fields: [projectId], references: [id])
  author          User             @relation("TaskAuthor", fields: [authorUserId], references: [userId])
  assignee        User?            @relation("TaskAssignee", fields: [assignedUserId], references: [userId])
  taskAssignments TaskAssignment[]
  attachments     Attachment[]
  comments        Comment[]
}

model TaskAssignment {
  id     Int @id @default(autoincrement())
  userId Int
  taskId Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user User @relation(fields: [userId], references: [userId])
  task Task @relation(fields: [taskId], references: [id])
}

model Attachment {
  id           Int     @id @default(autoincrement())
  fileURL      String
  fileName     String?
  taskId       Int
  uploadedById Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  task       Task @relation(fields: [taskId], references: [id])
  uploadedBy User @relation(fields: [uploadedById], references: [userId])
}

model Comment {
  id     Int    @id @default(autoincrement())
  text   String
  taskId Int
  userId Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [userId])
}
